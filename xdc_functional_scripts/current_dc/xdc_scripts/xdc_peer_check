#!/bin/bash
# @@@ START COPYRIGHT @@@
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# @@@ END COPYRIGHT @@@

function Usage {

    echo 
    echo "Usage: `basename $0` [ -i <nn> | -d <nn> | -k | -n | -h | -v | -x ]"
    echo 
    echo "-i <nn>  Number of times the check will be done (Default 1)"
    echo "-d <nn>  Duration of sleep (in seconds) between each check"
    echo "-k       Keep checking even if the peer is down (or inaccessible)"
    echo "-x       Execute xdc_peer_down if the peer check returns an error"
    echo
    echo "-n       Notify when the peer cluster becomes unavailable. Send the"
    echo "         notification email to the recipients listed in the file"
    echo "         $TRAF_HOME/etc/xdc_peer_check.notify_recipients"
    echo
    echo "-h       Help"
    echo "-v       Verbose"
    echo

}

function PrintHeader {

    echo
    echo "- This script checks whether the XDC peer cluster(s) are accessible."
    echo -n "- Based on the parameters, this script will execute"
    if [ ${lv_num_provided} '==' 1 ]; then
	echo -n " a total of ${lv_num_checks} time"
	if [ ${lv_num_checks} '>' 1 ]; then
	    lv_check_more_than_once=1
	    echo -n "s"
	else
	    lv_sleep=0
	fi
    else 
	if ( [ ${lv_num_checks} '==' 1 ] && [ ${lv_sleep} '==' 0 ] ); then
	    echo -n " a total of ${lv_num_checks} time"
	    lv_check_more_than_once=0
	    lv_num_provided=1
	else
	    lv_check_more_than_once=1
	    echo -n " continously"
	fi
    fi
    if [ ${lv_sleep} '>' 0 ]; then
	echo -n " every ${lv_sleep} seconds"
    fi
    echo "."
    if [ ${lv_execute_peer_down} '==' 1 ]; then
	echo "- Will execute xdc_peer_down on the peer if it becomes inaccessible."
    fi
    if [ ${lv_notification} '==' 1 ]; then
	echo "- Will send a notification email when the peer becomes inaccessible."
    fi
    if ( [ ${lv_check_more_than_once} '==' 1 ] &&
	 [ ${lv_keep_checking} '==' 1 ] ); then
	echo "- Will keep checking even if the peer is down (or inaccessible)."
    fi
    echo

}

function SendNotification {
    lv_peer_id=$1
    lv_subject="EsgynDB_PeerID_${lv_peer_id}_unavailable"
    lv_curr_time=`date +%Y%m%d_%H%M%S`;
    lv_body_file=${TRAF_HOME}/logs/xdc_peer_check.notification.email.${lv_curr_time}
    echo "`date`" > ${lv_body_file}
    echo "Login to cluster id ${lv_my_cluster_id}." >> ${lv_body_file}
    echo "Execute: xdc_peer_down ${lv_peer_id}" >> ${lv_body_file}
    echo "Send notification via: edb_sendmail -t ${lv_to_list_file} -s $lv_subject -b ${lv_body_file}"
    edb_sendmail -t ${lv_to_list_file} -s $lv_subject -b ${lv_body_file}

}

function ProcessPeerDown {
    if [ ${lv_notification} '==' 1 ]; then
	SendNotification $*
    fi
    if [ ${lv_execute_peer_down} '==' 1 ]; then
	echo "`date`: Executing xdc_peer_down ${lv_peer}"
	xdc_peer_down -p ${lv_peer}
    fi
    
    if [ ${lv_keep_checking} '==' 0 ]; then
	exit 1;
    fi
}

declare -i lv_check_more_than_once=0
declare -i lv_keep_checking=0
declare -i lv_num_checks=1
declare -i lv_sleep=0
declare -i lv_num_provided=0
declare -i lv_execute_peer_down=0
declare -i lv_verbose=0
declare -i lv_my_cluster_id=0

let lv_check_more_than_once=0
let lv_keep_checking=0
let lv_sleep=0
let lv_num_checks=1
let lv_num_provided=0
let lv_execute_peer_down=0
let lv_notification=0

while getopts "d:hi:nqvxk" arg
do
    case $arg in
	k)
	    lv_keep_checking=1
	    ;;
	d)
            lv_sleep=${OPTARG}
            ;;
	i)
            let lv_num_provided=1
            lv_num_checks=${OPTARG}
            ;;
	n)
            lv_notification=1
	    ;;
	q)
            lv_verbose=0
	    ;;
	v)
            lv_verbose=1
	    ;;
	x)
            lv_execute_peer_down=1
            ;;
	h)
	    Usage;
	    exit 1;
	    ;;
	*) 
	    Usage
	    exit 1;
    esac
done

PrintHeader

lv_to_list_file=${TRAF_HOME}/etc/xdc_peer_check.notify_recipients
if [ ${lv_notification} '==' 1 ]; then
    if [ ! -f ${lv_to_list_file} ]; then
	echo "The file containing the notification email recipients: ${lv_to_list_file} does not exist."
	echo "Exitting..."
	exit 1 ;
    fi
    lv_my_cluster_id=`xdc -getmyid`
    if [ $? '!=' 0 ]; then
	echo "Error getting my cluster id. Please check the health of the local Zookeeper/HBase instance."
	exit 1
    fi
    if [ ${lv_verbose} '==' 1 ]; then
	echo "My cluster id: ${lv_my_cluster_id}"
    fi
fi

while [ ${lv_num_checks} '>' 0 ]; do
    echo "======== `date` ========"

    lv_peers=`xdc_peer_list`
    lv_ret=$?
    if [[ ${lv_ret} != 0 ]]; then
	echo ${lv_peers}
	exit 1;
    fi
    
    if [[ ${#lv_peers} > 0 ]]; then
	for lv_peer in $lv_peers; do
	    xdc -get ${lv_peer} | grep ':sup$'
	    lv_ret=$?
	    if [[ ${lv_ret} != 0 ]]; then
		xdc -get ${lv_peer}
		echo "The STR status of peer ${lv_peer} is DOWN. Skipping its check..."
	    else
		echo "Checking the STR status of peer: ${lv_peer}"
		hbcheck -p ${lv_peer} $*
		lv_ret=$?
		if [[ ${lv_ret} != 0 ]]; then
		    ProcessPeerDown ${lv_peer}
		fi
	    fi
	done
    fi
    
    if [ ${lv_num_provided} '==' 1 ]; then
	let --lv_num_checks
    fi

    if [ ${lv_num_checks} '>' 0 ]; then
	if [ $lv_sleep '>' 0 ]; then
	    sleep ${lv_sleep}
	fi
    fi

done

exit 0
